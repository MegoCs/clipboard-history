name: CI

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Linux system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxcb1-dev \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxcb-randr0-dev \
          libxcb-image0-dev \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libxext-dev \
          libxft-dev \
          libxi-dev \
          libxcursor-dev \
          libxdamage-dev \
          libxinerama-dev

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}
        components: rustfmt, clippy

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.target }}
        cache-on-failure: true

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy linting
      run: cargo clippy --all-targets --all-features --target ${{ matrix.target }} -- -D warnings

    - name: Build project
      run: cargo build --verbose --target ${{ matrix.target }}

    - name: Run tests
      run: cargo test --verbose --target ${{ matrix.target }}
      timeout-minutes: 15

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Linux system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxcb1-dev \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxcb-randr0-dev \
          libxcb-image0-dev \
          libfontconfig1-dev \
          libfreetype6-dev

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false

  result:
    name: CI Result
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: always()
    
    steps:
    - name: Report success
      if: needs.test.result == 'success' && (needs.coverage.result == 'success' || needs.coverage.result == 'skipped')
      run: echo "✅ All CI checks passed!"
      
    - name: Report failure  
      if: needs.test.result != 'success' || (needs.coverage.result != 'success' && needs.coverage.result != 'skipped')
      run: |
        echo "❌ CI failed!"
        echo "Test status: ${{ needs.test.result }}"
        echo "Coverage status: ${{ needs.coverage.result }}"
        exit 1
