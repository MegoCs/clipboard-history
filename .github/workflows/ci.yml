name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master", "develop" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        cache-on-failure: true

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose
      env:
        RUST_TEST_TIMEOUT: 300

    - name: Build debug
      run: cargo build --verbose

    - name: Build release
      run: cargo build --release --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  build-artifacts:
    name: Build Release Artifacts
    needs: [test, security-audit]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: clipboard-history-linux-x64
            binary-extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: clipboard-history-windows-x64
            binary-extension: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact-name: clipboard-history-macos-x64
            binary-extension: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact-name: clipboard-history-macos-arm64
            binary-extension: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        cache-on-failure: true

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create artifact directory (Unix)
      if: matrix.os != 'windows-latest'
      run: mkdir -p artifacts

    - name: Create artifact directory (Windows)
      if: matrix.os == 'windows-latest'
      run: New-Item -ItemType Directory -Force -Path artifacts
      shell: pwsh

    - name: Copy binary to artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/clipboard-history${{ matrix.binary-extension }} artifacts/
        chmod +x artifacts/clipboard-history${{ matrix.binary-extension }}

    - name: Copy binary to artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: Copy-Item "target\${{ matrix.target }}\release\clipboard-history${{ matrix.binary-extension }}" "artifacts\"
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: artifacts/clipboard-history${{ matrix.binary-extension }}
        retention-days: 30

  release:
    name: Create Release
    needs: [build-artifacts]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from Cargo.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
    
    - name: Create release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}-build-${{ github.run_number }}
        name: Clipboard History Manager ${{ steps.get_version.outputs.version }} (Build ${{ github.run_number }})
        body: |
          ## Clipboard History Manager Release
          
          ### Features
          - üîç **Advanced Search**: Fuzzy matching and exact text search
          - üíæ **Persistent Storage**: Automatic save/restore of clipboard history  
          - ‚ö° **Background Monitoring**: Continuous clipboard tracking
          - üéØ **Interactive UI**: Easy-to-use terminal interface
          - üìã **Copy-to-Clipboard**: Select any item to copy back to clipboard
          - üîí **Cross-Platform**: Works on Windows, macOS, and Linux
          
          ### Download the appropriate binary for your platform:
          - **Windows**: clipboard-history-windows-x64.exe
          - **Linux**: clipboard-history-linux-x64  
          - **macOS Intel**: clipboard-history-macos-x64
          - **macOS Apple Silicon**: clipboard-history-macos-arm64
          
          ### Usage
          ```bash
          ./clipboard-history
          # or on Windows:
          clipboard-history.exe
          ```
          
          **Commit**: ${{ github.sha }}
          **Build**: #${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          release-artifacts/clipboard-history-linux-x64/clipboard-history
          release-artifacts/clipboard-history-windows-x64/clipboard-history.exe
          release-artifacts/clipboard-history-macos-x64/clipboard-history
          release-artifacts/clipboard-history-macos-arm64/clipboard-history

  notify:
    name: Notify Status
    needs: [test, security-audit, build-artifacts]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Notify Success
      if: needs.test.result == 'success' && needs.security-audit.result == 'success' && needs.build-artifacts.result == 'success'
      run: |
        echo "‚úÖ All jobs completed successfully!"
        echo "- Tests passed on all platforms"
        echo "- Security audit passed"  
        echo "- Release artifacts built"
        
    - name: Notify Failure
      if: needs.test.result == 'failure' || needs.security-audit.result == 'failure' || needs.build-artifacts.result == 'failure'
      run: |
        echo "‚ùå Pipeline failed!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security-audit.result }}"
        echo "- Build: ${{ needs.build-artifacts.result }}"
        exit 1
